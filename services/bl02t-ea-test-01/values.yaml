# yaml-language-server: $schema=https://github.com/epics-containers/ec-helm-charts/releases/download/3.4.4/ioc-instance.schema.json#/$defs/service
# latest container image for GigE cameras from the GitHub Container Registry
ioc-instance:

  # the beamline name - only set for beamlines
  beamline: bl02t
  # the location where the IOCs will run - same as beamline for beamlines
  ioc_group: bl02t
  # the name of the repository in which the IOC is grouped
  location: bl02t

  # typically use the default service account in the namespace.
  # If you need to specify an alternative then uncomment below
  # serviceAccountName: k8s-p38-iocs

  # useHostNetwork - use host network for IOC - required for Channel Access
  # to work outside of the cluster
  hostNetwork: true

  # useAffinity - only run on nodes with label beamline:<beamline-name>
  # or location:<location-name>
  # Comment out useAffiniity for dedicated cluster, set to true for shared cluster


  # The following are added to the pod's environment and are shared by all
  # IOCs. TODO - these defaults are for a lab crate in DLS - if you have
  # RTEMS IOCs update accordingly.
  globalEnv:
    # These variables are used by RTEMS IOCs to find the NFS and TFTP servers
    - name: "RTEMS_ROOT_NFS"
      value: "/nfsv2-tftp"
    - name: "RTEMS_ROOT_TFTP"
      value: "/nfsv2-tftp"
    - name: "RTEMS_NFS_IP"
      value: "172.23.90.238"
    - name: "RTEMS_TFTP_IP"
      value: "172.23.90.238"
    # NB. Gateway and Netmask are the same for all RTEMS IOCs on a beamline
    # But may need to move these to iocEnv for Machine IOCs?
    - name: "RTEMS_IOC_NETMASK"
      value: "255.255.240.0"
    - name: "RTEMS_IOC_GATEWAY"
      value: "172.23.240.254"
  # This also adds environment variables to the pod, but this should be
  # overridden by each IOC's values.yaml as needed. Don't set values in this
  # file because they will be overridden by IOCs.
  # iocEnv:
  #   - name: ""
  #     value: ""

  # defaults for securityContext
  # Usually override runAsXXX in the individual IOC values.yaml.
  # At DLS the IOCs that write to the shared data directory must use
  # iXXdetector user/group IDs
  securityContext:
    allowPrivilegeEscalation: false
  #   runAsUser: 37887
  #   runAsGroup: 37887

  ########################################################################################
  # The following values are expected to be overridden in individual IOC values.yaml
  ########################################################################################

  # This value is the only mandatory override. You must declare the image for the
  # Generic IOC in the values.yaml for each IOC instance.
  image:

  # a volume to mount for writing data to. This can be a PVC or a hostPath
  # the PVC
  dataVolume:
    # Create a PVC called {.Chart.Name}-data when true
    pvc: true
    # A path on the host machine to write data into. Also used as the path that the
    # pvc or hostPath will be mounted at so that users need not be confused about
    # inside/outside container paths.

    # This should be a hostPath to the shared data directory for IOCs that
    # need to write to the shared data directory - at DLS this must be
    # /dls/iXX/data (writing data to the host also needs 'pvc: false')
    hostPath: /data

  # use the shared PVC for publishing opi files over http (see services/opis)
  opisClaim: bl02t-opi-claim
  # use the shared PVC for publishing opi files over http (see services/opis)
  runtimeClaim: bl02t-runtime-claim
  # use the shared PVC autosave files (comment out for no autosave)
  autosaveClaim: bl02t-autosave-claim

  # default resource limits
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 64M

  image: ghcr.io/epics-containers/ioc-adsimdetector-runtime:2024.4.1

  # NOTE: the following are suggestions to help with debugging IOCs
  # 1. replace the runtime container with the developer version
  #    this adds tools and compilers to the container so you
  #    can experiment in the cluster to fix the issue
  #
  # image: ghcr.io/epics-containers/ioc-adsimdetector-developer:2024.4.1

  # 2. override the entry point to be a sleep infinity
  #    this means you can now use 'ec exec' to get a shell
  #    in the container and run /epics/ioc/start.sh.
  #    If it fails you can see the error and the pod
  #    will not terminate. In combination with 1. above you
  #    can experiment with changes until the issue
  #    is fixed.
  #
  # startCommand: sleep
  # startArgs: infinity